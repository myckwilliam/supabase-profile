{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport class PostgrestBuilder {\n  constructor(builder) {\n    Object.assign(this, builder);\n\n    let _fetch;\n\n    if (builder.fetch) {\n      _fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = (...args) => __awaiter(this, void 0, void 0, function* () {\n        return yield (yield import('cross-fetch')).fetch(...args);\n      });\n    } else {\n      _fetch = fetch;\n    }\n\n    this.fetch = (...args) => _fetch(...args);\n\n    this.shouldThrowOnError = builder.shouldThrowOnError || false;\n    this.allowEmpty = builder.allowEmpty || false;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  throwOnError(throwOnError) {\n    if (throwOnError === null || throwOnError === undefined) {\n      throwOnError = true;\n    }\n\n    this.shouldThrowOnError = throwOnError;\n    return this;\n  }\n\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {// skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(res => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c, _d;\n\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n\n      if (res.ok) {\n        const isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = yield res.text();\n\n          if (!text) {// discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text;\n          } else {\n            data = JSON.parse(text);\n          }\n        }\n\n        const countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n      } else {\n        const body = yield res.text();\n\n        try {\n          error = JSON.parse(body);\n        } catch (_e) {\n          error = {\n            message: body\n          };\n        }\n\n        if (error && this.allowEmpty && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('Results contain 0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n        body: data\n      };\n      return postgrestResponse;\n    }));\n\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request'\n      }));\n    }\n\n    return res.then(onfulfilled, onrejected);\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","PostgrestBuilder","constructor","builder","Object","assign","_fetch","fetch","args","shouldThrowOnError","allowEmpty","throwOnError","undefined","onfulfilled","onrejected","schema","includes","method","headers","res","url","toString","body","JSON","stringify","signal","_a","_b","_c","_d","error","data","count","status","statusText","ok","isReturnMinimal","split","text","parse","countHeader","match","contentRange","get","length","parseInt","_e","message","details","postgrestResponse","catch","fetchError","hint","code"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/lib/types.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class PostgrestBuilder {\n    constructor(builder) {\n        Object.assign(this, builder);\n        let _fetch;\n        if (builder.fetch) {\n            _fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            _fetch = (...args) => __awaiter(this, void 0, void 0, function* () { return yield (yield import('cross-fetch')).fetch(...args); });\n        }\n        else {\n            _fetch = fetch;\n        }\n        this.fetch = (...args) => _fetch(...args);\n        this.shouldThrowOnError = builder.shouldThrowOnError || false;\n        this.allowEmpty = builder.allowEmpty || false;\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError(throwOnError) {\n        if (throwOnError === null || throwOnError === undefined) {\n            throwOnError = true;\n        }\n        this.shouldThrowOnError = throwOnError;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (typeof this.schema === 'undefined') {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        let res = this.fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then((res) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                const isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n                if (this.method !== 'HEAD' && !isReturnMinimal) {\n                    const text = yield res.text();\n                    if (!text) {\n                        // discard `text`\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = text;\n                    }\n                    else {\n                        data = JSON.parse(text);\n                    }\n                }\n                const countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = yield res.text();\n                try {\n                    error = JSON.parse(body);\n                }\n                catch (_e) {\n                    error = {\n                        message: body,\n                    };\n                }\n                if (error && this.allowEmpty && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n                body: data,\n            };\n            return postgrestResponse;\n        }));\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => ({\n                error: {\n                    message: `FetchError: ${fetchError.message}`,\n                    details: '',\n                    hint: '',\n                    code: fetchError.code || '',\n                },\n                data: null,\n                body: null,\n                count: null,\n                status: 400,\n                statusText: 'Bad Request',\n            }));\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}