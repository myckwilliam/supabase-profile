{"ast":null,"code":"/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n\n(function (PostgresTypes) {\n  PostgresTypes[\"abstime\"] = \"abstime\";\n  PostgresTypes[\"bool\"] = \"bool\";\n  PostgresTypes[\"date\"] = \"date\";\n  PostgresTypes[\"daterange\"] = \"daterange\";\n  PostgresTypes[\"float4\"] = \"float4\";\n  PostgresTypes[\"float8\"] = \"float8\";\n  PostgresTypes[\"int2\"] = \"int2\";\n  PostgresTypes[\"int4\"] = \"int4\";\n  PostgresTypes[\"int4range\"] = \"int4range\";\n  PostgresTypes[\"int8\"] = \"int8\";\n  PostgresTypes[\"int8range\"] = \"int8range\";\n  PostgresTypes[\"json\"] = \"json\";\n  PostgresTypes[\"jsonb\"] = \"jsonb\";\n  PostgresTypes[\"money\"] = \"money\";\n  PostgresTypes[\"numeric\"] = \"numeric\";\n  PostgresTypes[\"oid\"] = \"oid\";\n  PostgresTypes[\"reltime\"] = \"reltime\";\n  PostgresTypes[\"text\"] = \"text\";\n  PostgresTypes[\"time\"] = \"time\";\n  PostgresTypes[\"timestamp\"] = \"timestamp\";\n  PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n  PostgresTypes[\"timetz\"] = \"timetz\";\n  PostgresTypes[\"tsrange\"] = \"tsrange\";\n  PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\n\n\nexport const convertChangeData = (columns, record, options = {}) => {\n  var _a;\n\n  const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n    return acc;\n  }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\n\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n  const column = columns.find(x => x.name === columnName);\n  const colType = column === null || column === void 0 ? void 0 : column.type;\n  const value = record[columnName];\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value);\n  }\n\n  return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\n\nexport const convertCell = (type, value) => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length);\n    return toArray(value, dataType);\n  } // If not null, convert to correct type.\n\n\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value);\n\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value);\n\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value);\n\n    case PostgresTypes.timestamp:\n      return toTimestampString(value);\n    // Format to be consistent with PostgREST\n\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value);\n\n    default:\n      // Return the value for remaining types\n      return noop(value);\n  }\n};\n\nconst noop = value => {\n  return value;\n};\n\nexport const toBoolean = value => {\n  switch (value) {\n    case 't':\n      return true;\n\n    case 'f':\n      return false;\n\n    default:\n      return value;\n  }\n};\nexport const toNumber = value => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value);\n\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n\n  return value;\n};\nexport const toJson = value => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`);\n      return value;\n    }\n  }\n\n  return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\n\nexport const toArray = (value, type) => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  const lastIdx = value.length - 1;\n  const closeBrace = value[lastIdx];\n  const openBrace = value[0]; // Confirm value is a Postgres array by checking curly brackets\n\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr;\n    const valTrim = value.slice(1, lastIdx); // TODO: find a better solution to separate Postgres array data\n\n    try {\n      arr = JSON.parse('[' + valTrim + ']');\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : [];\n    }\n\n    return arr.map(val => convertCell(type, val));\n  }\n\n  return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\n\nexport const toTimestampString = value => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T');\n  }\n\n  return value;\n};","map":{"version":3,"names":["PostgresTypes","convertChangeData","columns","record","options","_a","skipTypes","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","dataType","slice","length","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/realtime-js/dist/module/lib/transformers.js"],"sourcesContent":["/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}