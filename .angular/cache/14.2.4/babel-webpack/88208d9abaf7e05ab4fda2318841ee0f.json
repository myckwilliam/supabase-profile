{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    shouldThrowOnError\n  } = {}) {\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  select(columns = '*', {\n    head = false,\n    count = null\n  } = {}) {\n    this.method = 'GET'; // Remove whitespaces except when quoted\n\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n\n    if (head) {\n      this.method = 'HEAD';\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n  insert(values, {\n    upsert = false,\n    onConflict,\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'POST';\n    const prefersHeaders = [`return=${returning}`];\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n\n\n  upsert(values, {\n    onConflict,\n    returning = 'representation',\n    count = null,\n    ignoreDuplicates = false\n  } = {}) {\n    this.method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`, `return=${returning}`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  update(values, {\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'PATCH';\n    const prefersHeaders = [`return=${returning}`];\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  delete({\n    returning = 'representation',\n    count = null\n  } = {}) {\n    this.method = 'DELETE';\n    const prefersHeaders = [`return=${returning}`];\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","URL","Object","assign","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","insert","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","ignoreDuplicates","update","delete"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/lib/PostgrestQueryBuilder.js"],"sourcesContent":["import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n    constructor(url, { headers = {}, schema, fetch, shouldThrowOnError, } = {}) {\n        super({ fetch, shouldThrowOnError });\n        this.url = new URL(url);\n        this.headers = Object.assign({}, headers);\n        this.schema = schema;\n    }\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     * @param head  When set to true, select will void data.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    select(columns = '*', { head = false, count = null, } = {}) {\n        this.method = 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = columns\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        if (head) {\n            this.method = 'HEAD';\n        }\n        return new PostgrestFilterBuilder(this);\n    }\n    insert(values, { upsert = false, onConflict, returning = 'representation', count = null, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [`return=${returning}`];\n        if (upsert)\n            prefersHeaders.push('resolution=merge-duplicates');\n        if (upsert && onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPSERT into the table.\n     *\n     * @param values  The values to insert.\n     * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n     * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n     */\n    upsert(values, { onConflict, returning = 'representation', count = null, ignoreDuplicates = false, } = {}) {\n        this.method = 'POST';\n        const prefersHeaders = [\n            `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n            `return=${returning}`,\n        ];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs an UPDATE on the table.\n     *\n     * @param values  The values to update.\n     * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    update(values, { returning = 'representation', count = null, } = {}) {\n        this.method = 'PATCH';\n        const prefersHeaders = [`return=${returning}`];\n        this.body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n    /**\n     * Performs a DELETE on the table.\n     *\n     * @param returning  If `true`, return the deleted row(s) in the response.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    delete({ returning = 'representation', count = null, } = {}) {\n        this.method = 'DELETE';\n        const prefersHeaders = [`return=${returning}`];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder(this);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}