{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeSubscription from './RealtimeSubscription';\n\nconst noop = () => {};\n\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.longpollerTimeout = 20000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    if (options === null || options === void 0 ? void 0 : options.longpollerTimeout) this.longpollerTimeout = options.longpollerTimeout;\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      yield this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n\n    if (this.conn) {\n      // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this.onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    return new Promise((resolve, _reject) => {\n      try {\n        if (this.conn) {\n          this.conn.onclose = function () {}; // noop\n\n\n          if (code) {\n            this.conn.close(code, reason || '');\n          } else {\n            this.conn.close();\n          }\n\n          this.conn = null; // remove open handles\n\n          this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n          this.reconnectTimer.reset();\n        }\n\n        resolve({\n          error: null,\n          data: true\n        });\n      } catch (error) {\n        resolve({\n          error: error,\n          data: false\n        });\n      }\n    });\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Registers a callback for connection state change event.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket opened.\"))\n   */\n\n\n  onOpen(callback) {\n    this.stateChangeCallbacks.open.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket closed.\"))\n   */\n\n\n  onClose(callback) {\n    this.stateChangeCallbacks.close.push(callback);\n  }\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen((error) => console.log(\"An error occurred\"))\n   */\n\n\n  onError(callback) {\n    this.stateChangeCallbacks.error.push(callback);\n  }\n  /**\n   * Calls a function any time a message is received.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onMessage((message) => console.log(message))\n   */\n\n\n  onMessage(callback) {\n    this.stateChangeCallbacks.message.push(callback);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Retuns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   */\n\n\n  remove(channel) {\n    this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n  }\n\n  channel(topic, chanParams = {}) {\n    const chan = new RealtimeSubscription(topic, chanParams, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel.isMember(topic)).forEach(channel => channel.trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /**\n   * Returns the URL of the websocket.\n   */\n\n\n  endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   */\n\n\n  makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n\n\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        user_token: token\n      });\n\n      if (channel.joinedOnce && channel.isJoined()) {\n        channel.push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   */\n\n\n  leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c.isJoined() || c.isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this.endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel.trigger(CHANNEL_EVENTS.error));\n  }\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this.makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeSubscription","noop","RealtimeClient","constructor","endPoint","options","accessToken","channels","headers","params","timeout","transport","heartbeatIntervalMs","longpollerTimeout","heartbeatTimer","undefined","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","websocket","Object","assign","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","disconnect","connect","endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","onConnMessage","onclose","_onConnClose","code","reason","_reject","clearInterval","reset","data","log","kind","msg","onOpen","push","onClose","onError","onMessage","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","remove","channel","filter","c","joinRef","topic","chanParams","chan","_a","send","rawMessage","type","status","isMember","forEach","trigger","_appendParams","vsn","makeRef","newRef","toString","setAuth","token","updateJoinPayload","user_token","joinedOnce","isJoined","access_token","leaveOpenTopic","dupChannel","find","isJoining","unsubscribe","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","length","prefix","match","query","URLSearchParams"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE, } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeSubscription from './RealtimeSubscription';\nconst noop = () => { };\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     */\n    constructor(endPoint, options) {\n        this.accessToken = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.transport = w3cwebsocket;\n        this.heartbeatIntervalMs = 30000;\n        this.longpollerTimeout = 20000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.transport)\n            this.transport = options.transport;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        if (options === null || options === void 0 ? void 0 : options.longpollerTimeout)\n            this.longpollerTimeout = options.longpollerTimeout;\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.disconnect();\n            this.connect();\n        }), this.reconnectAfterMs);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        this.conn = new this.transport(this.endPointURL(), [], null, this.headers);\n        if (this.conn) {\n            // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this.onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        return new Promise((resolve, _reject) => {\n            try {\n                if (this.conn) {\n                    this.conn.onclose = function () { }; // noop\n                    if (code) {\n                        this.conn.close(code, reason || '');\n                    }\n                    else {\n                        this.conn.close();\n                    }\n                    this.conn = null;\n                    // remove open handles\n                    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n                    this.reconnectTimer.reset();\n                }\n                resolve({ error: null, data: true });\n            }\n            catch (error) {\n                resolve({ error: error, data: false });\n            }\n        });\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overriden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Registers a callback for connection state change event.\n     *\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket opened.\"))\n     */\n    onOpen(callback) {\n        this.stateChangeCallbacks.open.push(callback);\n    }\n    /**\n     * Registers a callback for connection state change events.\n     *\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen(() => console.log(\"Socket closed.\"))\n     */\n    onClose(callback) {\n        this.stateChangeCallbacks.close.push(callback);\n    }\n    /**\n     * Registers a callback for connection state change events.\n     *\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onOpen((error) => console.log(\"An error occurred\"))\n     */\n    onError(callback) {\n        this.stateChangeCallbacks.error.push(callback);\n    }\n    /**\n     * Calls a function any time a message is received.\n     *\n     * @param callback A function to be called when the event occurs.\n     *\n     * @example\n     *    socket.onMessage((message) => console.log(message))\n     */\n    onMessage(callback) {\n        this.stateChangeCallbacks.message.push(callback);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Retuns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     */\n    remove(channel) {\n        this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());\n    }\n    channel(topic, chanParams = {}) {\n        const chan = new RealtimeSubscription(topic, chanParams, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        let callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if ((ref && ref === this.pendingHeartbeatRef) ||\n                event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel.isMember(topic))\n                .forEach((channel) => channel.trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     */\n    endPointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     */\n    makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * @param token A JWT string.\n     */\n    setAuth(token) {\n        this.accessToken = token;\n        this.channels.forEach((channel) => {\n            token && channel.updateJoinPayload({ user_token: token });\n            if (channel.joinedOnce && channel.isJoined()) {\n                channel.push(CHANNEL_EVENTS.access_token, { access_token: token });\n            }\n        });\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     */\n    leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    _onConnOpen() {\n        this.log('transport', `connected to ${this.endPointURL()}`);\n        this._flushSendBuffer();\n        this.reconnectTimer.reset();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel.trigger(CHANNEL_EVENTS.error));\n    }\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    _sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this.makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth(this.accessToken);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}