{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport class StorageBucketApi {\n  constructor(url, headers = {}, fetch) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id, options = {\n    public: false\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.name,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","DEFAULT_HEADERS","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","Object","assign","listBuckets","data","error","getBucket","id","createBucket","options","public","name","updateBucket","emptyBucket","deleteBucket"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/storage-js/dist/module/lib/StorageBucketApi.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = { public: false }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data: data.name, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}