{"ast":null,"code":"import { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*') {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    return this;\n  }\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n\n\n  order(column, {\n    ascending = true,\n    nullsFirst = false,\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`;\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${nullsFirst ? 'nullsfirst' : 'nullslast'}`);\n    return this;\n  }\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n\n\n  limit(count, {\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n\n\n  range(from, to, {\n    foreignTable\n  } = {}) {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n\n\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\n   * Set the response type to CSV.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","headers","maybeSingle","allowEmpty","csv"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/lib/PostgrestTransformBuilder.js"],"sourcesContent":["import { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    select(columns = '*') {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = columns\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        return this;\n    }\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n    order(column, { ascending = true, nullsFirst = false, foreignTable, } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`;\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${nullsFirst ? 'nullsfirst' : 'nullslast'}`);\n        return this;\n    }\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n    maybeSingle() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        this.allowEmpty = true;\n        return this;\n    }\n    /**\n     * Set the response type to CSV.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}