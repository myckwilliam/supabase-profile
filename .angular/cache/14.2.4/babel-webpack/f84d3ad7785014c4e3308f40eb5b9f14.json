{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, {\n    headers = {},\n    schema,\n    realtime,\n    table,\n    fetch,\n    shouldThrowOnError\n  }) {\n    super(url, {\n      headers,\n      schema,\n      fetch,\n      shouldThrowOnError\n    });\n    this._subscription = null;\n    this._realtime = realtime;\n    this._headers = headers;\n    this._schema = schema;\n    this._table = table;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n    }\n\n    return this._subscription.on(event, callback);\n  }\n\n}","map":{"version":3,"names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","constructor","url","headers","schema","realtime","table","fetch","shouldThrowOnError","_subscription","_realtime","_headers","_schema","_table","on","event","callback","isConnected","connect"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/supabase-js/dist/module/lib/SupabaseQueryBuilder.js"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, realtime, table, fetch, shouldThrowOnError, }) {\n        super(url, { headers, schema, fetch, shouldThrowOnError });\n        this._subscription = null;\n        this._realtime = realtime;\n        this._headers = headers;\n        this._schema = schema;\n        this._table = table;\n    }\n    /**\n     * Subscribe to realtime changes in your database.\n     * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n     * @param callback A callback that will handle the payload that is sent whenever your database changes.\n     */\n    on(event, callback) {\n        if (!this._realtime.isConnected()) {\n            this._realtime.connect();\n        }\n        if (!this._subscription) {\n            this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n        }\n        return this._subscription.on(event, callback);\n    }\n}\n"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,wBAAtC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,OAAO,MAAMC,oBAAN,SAAmCF,qBAAnC,CAAyD;EAC5DG,WAAW,CAACC,GAAD,EAAM;IAAEC,OAAO,GAAG,EAAZ;IAAgBC,MAAhB;IAAwBC,QAAxB;IAAkCC,KAAlC;IAAyCC,KAAzC;IAAgDC;EAAhD,CAAN,EAA6E;IACpF,MAAMN,GAAN,EAAW;MAAEC,OAAF;MAAWC,MAAX;MAAmBG,KAAnB;MAA0BC;IAA1B,CAAX;IACA,KAAKC,aAAL,GAAqB,IAArB;IACA,KAAKC,SAAL,GAAiBL,QAAjB;IACA,KAAKM,QAAL,GAAgBR,OAAhB;IACA,KAAKS,OAAL,GAAeR,MAAf;IACA,KAAKS,MAAL,GAAcP,KAAd;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIQ,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAChB,IAAI,CAAC,KAAKN,SAAL,CAAeO,WAAf,EAAL,EAAmC;MAC/B,KAAKP,SAAL,CAAeQ,OAAf;IACH;;IACD,IAAI,CAAC,KAAKT,aAAV,EAAyB;MACrB,KAAKA,aAAL,GAAqB,IAAIV,sBAAJ,CAA2B,KAAKW,SAAhC,EAA2C,KAAKC,QAAhD,EAA0D,KAAKC,OAA/D,EAAwE,KAAKC,MAA7E,CAArB;IACH;;IACD,OAAO,KAAKJ,aAAL,CAAmBK,EAAnB,CAAsBC,KAAtB,EAA6BC,QAA7B,CAAP;EACH;;AAtB2D"},"metadata":{},"sourceType":"module"}