{"ast":null,"code":"import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    throwOnError\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  auth(token) {\n    this.headers['Authorization'] = `Bearer ${token}`;\n    return this;\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.url}/${table}`;\n    return new PostgrestQueryBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const url = `${this.url}/rpc/${fn}`;\n    return new PostgrestRpcBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    }).rpc(params, {\n      head,\n      count\n    });\n  }\n\n}","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestRpcBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","throwOnError","Object","assign","shouldThrowOnError","auth","token","from","table","rpc","fn","params","head","count"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js"],"sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url  URL of the PostgREST endpoint.\n     * @param headers  Custom headers.\n     * @param schema  Postgres schema to switch to.\n     */\n    constructor(url, { headers = {}, schema, fetch, throwOnError, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schema = schema;\n        this.fetch = fetch;\n        this.shouldThrowOnError = throwOnError;\n    }\n    /**\n     * Authenticates the request with JWT.\n     *\n     * @param token  The JWT token to use.\n     */\n    auth(token) {\n        this.headers['Authorization'] = `Bearer ${token}`;\n        return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n    from(table) {\n        const url = `${this.url}/${table}`;\n        return new PostgrestQueryBuilder(url, {\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            shouldThrowOnError: this.shouldThrowOnError,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n    rpc(fn, params, { head = false, count = null, } = {}) {\n        const url = `${this.url}/rpc/${fn}`;\n        return new PostgrestRpcBuilder(url, {\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            shouldThrowOnError: this.shouldThrowOnError,\n        }).rpc(params, { head, count });\n    }\n}\n"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,eAAe,MAAMC,eAAN,CAAsB;EACjC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,GAAD,EAAM;IAAEC,OAAO,GAAG,EAAZ;IAAgBC,MAAhB;IAAwBC,KAAxB;IAA+BC;EAA/B,IAAiD,EAAvD,EAA2D;IAClE,KAAKJ,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAeI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,eAAlB,CAAd,EAAkDI,OAAlD,CAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKI,kBAAL,GAA0BH,YAA1B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACII,IAAI,CAACC,KAAD,EAAQ;IACR,KAAKR,OAAL,CAAa,eAAb,IAAiC,UAASQ,KAAM,EAAhD;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,IAAI,CAACC,KAAD,EAAQ;IACR,MAAMX,GAAG,GAAI,GAAE,KAAKA,GAAI,IAAGW,KAAM,EAAjC;IACA,OAAO,IAAIhB,qBAAJ,CAA0BK,GAA1B,EAA+B;MAClCC,OAAO,EAAE,KAAKA,OADoB;MAElCC,MAAM,EAAE,KAAKA,MAFqB;MAGlCC,KAAK,EAAE,KAAKA,KAHsB;MAIlCI,kBAAkB,EAAE,KAAKA;IAJS,CAA/B,CAAP;EAMH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIK,GAAG,CAACC,EAAD,EAAKC,MAAL,EAAa;IAAEC,IAAI,GAAG,KAAT;IAAgBC,KAAK,GAAG;EAAxB,IAAkC,EAA/C,EAAmD;IAClD,MAAMhB,GAAG,GAAI,GAAE,KAAKA,GAAI,QAAOa,EAAG,EAAlC;IACA,OAAO,IAAIjB,mBAAJ,CAAwBI,GAAxB,EAA6B;MAChCC,OAAO,EAAE,KAAKA,OADkB;MAEhCC,MAAM,EAAE,KAAKA,MAFmB;MAGhCC,KAAK,EAAE,KAAKA,KAHoB;MAIhCI,kBAAkB,EAAE,KAAKA;IAJO,CAA7B,EAKJK,GALI,CAKAE,MALA,EAKQ;MAAEC,IAAF;MAAQC;IAAR,CALR,CAAP;EAMH;;AAtDgC"},"metadata":{},"sourceType":"module"}