{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestRpcBuilder extends PostgrestBuilder {\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch,\n    shouldThrowOnError\n  } = {}) {\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Perform a function call.\n   */\n\n\n  rpc(params, {\n    head = false,\n    count = null\n  } = {}) {\n    if (head) {\n      this.method = 'HEAD';\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value);\n        });\n      }\n    } else {\n      this.method = 'POST';\n      this.body = params;\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`;else this.headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestRpcBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","URL","Object","assign","rpc","params","head","count","method","entries","forEach","name","value","searchParams","append","body","undefined"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/lib/PostgrestRpcBuilder.js"],"sourcesContent":["import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestRpcBuilder extends PostgrestBuilder {\n    constructor(url, { headers = {}, schema, fetch, shouldThrowOnError, } = {}) {\n        super({ fetch, shouldThrowOnError });\n        this.url = new URL(url);\n        this.headers = Object.assign({}, headers);\n        this.schema = schema;\n    }\n    /**\n     * Perform a function call.\n     */\n    rpc(params, { head = false, count = null, } = {}) {\n        if (head) {\n            this.method = 'HEAD';\n            if (params) {\n                Object.entries(params).forEach(([name, value]) => {\n                    this.url.searchParams.append(name, value);\n                });\n            }\n        }\n        else {\n            this.method = 'POST';\n            this.body = params;\n        }\n        if (count) {\n            if (this.headers['Prefer'] !== undefined)\n                this.headers['Prefer'] += `,count=${count}`;\n            else\n                this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder(this);\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,SAAjC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,eAAe,MAAMC,mBAAN,SAAkCF,gBAAlC,CAAmD;EAC9DG,WAAW,CAACC,GAAD,EAAM;IAAEC,OAAO,GAAG,EAAZ;IAAgBC,MAAhB;IAAwBC,KAAxB;IAA+BC;EAA/B,IAAuD,EAA7D,EAAiE;IACxE,MAAM;MAAED,KAAF;MAASC;IAAT,CAAN;IACA,KAAKJ,GAAL,GAAW,IAAIK,GAAJ,CAAQL,GAAR,CAAX;IACA,KAAKC,OAAL,GAAeK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,CAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;EACH;EACD;AACJ;AACA;;;EACIM,GAAG,CAACC,MAAD,EAAS;IAAEC,IAAI,GAAG,KAAT;IAAgBC,KAAK,GAAG;EAAxB,IAAkC,EAA3C,EAA+C;IAC9C,IAAID,IAAJ,EAAU;MACN,KAAKE,MAAL,GAAc,MAAd;;MACA,IAAIH,MAAJ,EAAY;QACRH,MAAM,CAACO,OAAP,CAAeJ,MAAf,EAAuBK,OAAvB,CAA+B,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB;UAC9C,KAAKhB,GAAL,CAASiB,YAAT,CAAsBC,MAAtB,CAA6BH,IAA7B,EAAmCC,KAAnC;QACH,CAFD;MAGH;IACJ,CAPD,MAQK;MACD,KAAKJ,MAAL,GAAc,MAAd;MACA,KAAKO,IAAL,GAAYV,MAAZ;IACH;;IACD,IAAIE,KAAJ,EAAW;MACP,IAAI,KAAKV,OAAL,CAAa,QAAb,MAA2BmB,SAA/B,EACI,KAAKnB,OAAL,CAAa,QAAb,KAA2B,UAASU,KAAM,EAA1C,CADJ,KAGI,KAAKV,OAAL,CAAa,QAAb,IAA0B,SAAQU,KAAM,EAAxC;IACP;;IACD,OAAO,IAAId,sBAAJ,CAA2B,IAA3B,CAAP;EACH;;AA9B6D"},"metadata":{},"sourceType":"module"}