{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = `${_supabaseUrl}/rest/v1`;\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n    }\n\n    this.schema = settings.schema;\n    this.multiTab = settings.multiTab;\n    this.fetch = settings.fetch;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n    this.shouldThrowOnError = settings.shouldThrowOnError || false;\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n\n    this._listenForAuthEvents();\n\n    this._listenForMultiTabEvents(); // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this._getAuthHeaders(),\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.restUrl}/${table}`;\n    return new SupabaseQueryBuilder(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn, params, {\n    head = false,\n    count = null\n  } = {}) {\n    const rest = this._initPostgRESTClient();\n\n    return rest.rpc(fn, params, {\n      head,\n      count\n    });\n  }\n  /**\n   * Closes and removes all subscriptions and returns a list of removed\n   * subscriptions and their errors.\n   */\n\n\n  removeAllSubscriptions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allSubs = this.getSubscriptions().slice();\n      const allSubPromises = allSubs.map(sub => this.removeSubscription(sub));\n      const allRemovedSubs = yield Promise.all(allSubPromises);\n      return allRemovedSubs.map(({\n        error\n      }, i) => {\n        return {\n          data: {\n            subscription: allSubs[i]\n          },\n          error\n        };\n      });\n    });\n  }\n  /**\n   * Closes and removes a subscription and returns the number of open subscriptions.\n   *\n   * @param subscription The subscription you want to close and remove.\n   */\n\n\n  removeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        error\n      } = yield this._closeSubscription(subscription);\n      const allSubs = this.getSubscriptions();\n      const openSubCount = allSubs.filter(chan => chan.isJoined()).length;\n      if (allSubs.length === 0) yield this.realtime.disconnect();\n      return {\n        data: {\n          openSubscriptions: openSubCount\n        },\n        error\n      };\n    });\n  }\n\n  _closeSubscription(subscription) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let error = null;\n\n      if (!subscription.isClosed()) {\n        const {\n          error: unsubError\n        } = yield this._unsubscribeSubscription(subscription);\n        error = unsubError;\n      }\n\n      this.realtime.remove(subscription);\n      return {\n        error\n      };\n    });\n  }\n\n  _unsubscribeSubscription(subscription) {\n    return new Promise(resolve => {\n      subscription.unsubscribe().receive('ok', () => resolve({\n        error: null\n      })).receive('error', error => resolve({\n        error\n      })).receive('timeout', () => resolve({\n        error: new Error('timed out')\n      }));\n    });\n  }\n  /**\n   * Returns an array of all your subscriptions.\n   */\n\n\n  getSubscriptions() {\n    return this.realtime.channels;\n  }\n\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n    cookieOptions,\n    multiTab\n  }) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, headers), authHeaders),\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n      cookieOptions,\n      multiTab\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n        apikey: this.supabaseKey\n      })\n    }));\n  }\n\n  _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n      throwOnError: this.shouldThrowOnError\n    });\n  }\n\n  _getAuthHeaders() {\n    var _a, _b;\n\n    const headers = Object.assign({}, this.headers);\n    const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n    headers['apikey'] = this.supabaseKey;\n    headers['Authorization'] = headers['Authorization'] || `Bearer ${authBearer}`;\n    return headers;\n  }\n\n  _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      return null;\n    }\n\n    try {\n      return window === null || window === void 0 ? void 0 : window.addEventListener('storage', e => {\n        var _a, _b, _c;\n\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue));\n          const accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n          const previousAccessToken = (_c = this.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n          }\n        }\n      });\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error);\n      return null;\n    }\n  }\n\n  _listenForAuthEvents() {\n    let {\n      data\n    } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, token, source) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token); // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n\n      if (source == 'STORAGE') this.auth.setAuth(token);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n    }\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","DEFAULT_HEADERS","STORAGE_KEY","stripTrailingSlash","isBrowser","SupabaseAuthClient","SupabaseQueryBuilder","SupabaseStorageClient","FunctionsClient","PostgrestClient","RealtimeClient","DEFAULT_OPTIONS","schema","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","settings","Object","assign","restUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","fetch","shouldThrowOnError","auth","_initSupabaseAuthClient","realtime","_initRealtimeClient","_listenForAuthEvents","_listenForMultiTabEvents","functions","_getAuthHeaders","customFetch","storage","from","table","url","rpc","fn","params","head","count","rest","_initPostgRESTClient","removeAllSubscriptions","allSubs","getSubscriptions","slice","allSubPromises","map","sub","removeSubscription","allRemovedSubs","all","error","i","data","subscription","_closeSubscription","openSubCount","filter","chan","isJoined","length","disconnect","openSubscriptions","isClosed","unsubError","_unsubscribeSubscription","remove","unsubscribe","receive","channels","localStorage","cookieOptions","authHeaders","Authorization","apikey","throwOnError","_a","_b","authBearer","session","access_token","window","addEventListener","_c","key","newSession","JSON","parse","String","newValue","accessToken","currentSession","undefined","previousAccessToken","_handleTokenChanged","console","onAuthStateChange","event","token","source","changedAccessToken","setAuth","signOut"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nconst DEFAULT_OPTIONS = {\n    schema: 'public',\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    multiTab: true,\n    headers: DEFAULT_HEADERS,\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.headers Any additional headers to send with each network request.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n     * @param options.fetch A custom fetch implementation.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        this.restUrl = `${_supabaseUrl}/rest/v1`;\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n        if (isPlatform) {\n            const urlParts = _supabaseUrl.split('.');\n            this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n        }\n        else {\n            this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        }\n        this.schema = settings.schema;\n        this.multiTab = settings.multiTab;\n        this.fetch = settings.fetch;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n        this.shouldThrowOnError = settings.shouldThrowOnError || false;\n        this.auth = this._initSupabaseAuthClient(settings);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\n        this._listenForAuthEvents();\n        this._listenForMultiTabEvents();\n        // In the future we might allow the user to pass in a logger to receive these events.\n        // this.realtime.onOpen(() => console.log('OPEN'))\n        // this.realtime.onClose(() => console.log('CLOSED'))\n        // this.realtime.onError((e: Error) => console.log('Socket error', e))\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this._getAuthHeaders(),\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table The table name to operate on.\n     */\n    from(table) {\n        const url = `${this.restUrl}/${table}`;\n        return new SupabaseQueryBuilder(url, {\n            headers: this._getAuthHeaders(),\n            schema: this.schema,\n            realtime: this.realtime,\n            table,\n            fetch: this.fetch,\n            shouldThrowOnError: this.shouldThrowOnError,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head   When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc(fn, params, { head = false, count = null, } = {}) {\n        const rest = this._initPostgRESTClient();\n        return rest.rpc(fn, params, { head, count });\n    }\n    /**\n     * Closes and removes all subscriptions and returns a list of removed\n     * subscriptions and their errors.\n     */\n    removeAllSubscriptions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allSubs = this.getSubscriptions().slice();\n            const allSubPromises = allSubs.map((sub) => this.removeSubscription(sub));\n            const allRemovedSubs = yield Promise.all(allSubPromises);\n            return allRemovedSubs.map(({ error }, i) => {\n                return {\n                    data: { subscription: allSubs[i] },\n                    error,\n                };\n            });\n        });\n    }\n    /**\n     * Closes and removes a subscription and returns the number of open subscriptions.\n     *\n     * @param subscription The subscription you want to close and remove.\n     */\n    removeSubscription(subscription) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { error } = yield this._closeSubscription(subscription);\n            const allSubs = this.getSubscriptions();\n            const openSubCount = allSubs.filter((chan) => chan.isJoined()).length;\n            if (allSubs.length === 0)\n                yield this.realtime.disconnect();\n            return { data: { openSubscriptions: openSubCount }, error };\n        });\n    }\n    _closeSubscription(subscription) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let error = null;\n            if (!subscription.isClosed()) {\n                const { error: unsubError } = yield this._unsubscribeSubscription(subscription);\n                error = unsubError;\n            }\n            this.realtime.remove(subscription);\n            return { error };\n        });\n    }\n    _unsubscribeSubscription(subscription) {\n        return new Promise((resolve) => {\n            subscription\n                .unsubscribe()\n                .receive('ok', () => resolve({ error: null }))\n                .receive('error', (error) => resolve({ error }))\n                .receive('timeout', () => resolve({ error: new Error('timed out') }));\n        });\n    }\n    /**\n     * Returns an array of all your subscriptions.\n     */\n    getSubscriptions() {\n        return this.realtime.channels;\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, localStorage, headers, fetch, cookieOptions, multiTab, }) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, headers), authHeaders),\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            localStorage,\n            fetch,\n            cookieOptions,\n            multiTab,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), { apikey: this.supabaseKey }) }));\n    }\n    _initPostgRESTClient() {\n        return new PostgrestClient(this.restUrl, {\n            headers: this._getAuthHeaders(),\n            schema: this.schema,\n            fetch: this.fetch,\n            throwOnError: this.shouldThrowOnError,\n        });\n    }\n    _getAuthHeaders() {\n        var _a, _b;\n        const headers = Object.assign({}, this.headers);\n        const authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n        headers['apikey'] = this.supabaseKey;\n        headers['Authorization'] = headers['Authorization'] || `Bearer ${authBearer}`;\n        return headers;\n    }\n    _listenForMultiTabEvents() {\n        if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n            return null;\n        }\n        try {\n            return window === null || window === void 0 ? void 0 : window.addEventListener('storage', (e) => {\n                var _a, _b, _c;\n                if (e.key === STORAGE_KEY) {\n                    const newSession = JSON.parse(String(e.newValue));\n                    const accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n                    const previousAccessToken = (_c = this.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n                    if (!accessToken) {\n                        this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n                    }\n                    else if (!previousAccessToken && accessToken) {\n                        this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n                    }\n                    else if (previousAccessToken !== accessToken) {\n                        this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n                    }\n                }\n            });\n        }\n        catch (error) {\n            console.error('_listenForMultiTabEvents', error);\n            return null;\n        }\n    }\n    _listenForAuthEvents() {\n        let { data } = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n        });\n        return data;\n    }\n    _handleTokenChanged(event, token, source) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            // Token has changed\n            this.realtime.setAuth(token);\n            // Ideally we should call this.auth.recoverSession() - need to make public\n            // to trigger a \"SIGNED_IN\" event on this client.\n            if (source == 'STORAGE')\n                this.auth.setAuth(token);\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n            // Token is removed\n            this.realtime.setAuth(this.supabaseKey);\n            if (source == 'STORAGE')\n                this.auth.signOut();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}