{"ast":null,"code":"import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n  constructor(socket, headers, schema, tableName) {\n    const chanParams = {};\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n    const userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n\n    return records;\n  }\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n\n\n  on(event, callback) {\n    this.subscription.on(event, payload => {\n      let enrichedPayload = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors\n      };\n      enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n      callback(enrichedPayload);\n    });\n    return this;\n  }\n  /**\n   * Enables the subscription.\n   */\n\n\n  subscribe(callback = () => {}) {\n    this.subscription.onError(e => callback('SUBSCRIPTION_ERROR', e));\n    this.subscription.onClose(() => callback('CLOSED'));\n    this.subscription.subscribe().receive('ok', () => callback('SUBSCRIBED')).receive('error', e => callback('SUBSCRIPTION_ERROR', e)).receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n    return this.subscription;\n  }\n\n}","map":{"version":3,"names":["Transformers","SupabaseRealtimeClient","constructor","socket","headers","schema","tableName","chanParams","topic","userToken","split","subscription","channel","getPayloadRecords","payload","records","new","old","type","convertChangeData","columns","record","old_record","on","event","callback","enrichedPayload","table","commit_timestamp","eventType","errors","Object","assign","subscribe","onError","e","onClose","receive"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/supabase-js/dist/module/lib/SupabaseRealtimeClient.js"],"sourcesContent":["import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n    constructor(socket, headers, schema, tableName) {\n        const chanParams = {};\n        const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n        const userToken = headers['Authorization'].split(' ')[1];\n        if (userToken) {\n            chanParams['user_token'] = userToken;\n        }\n        this.subscription = socket.channel(topic, chanParams);\n    }\n    getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n    on(event, callback) {\n        this.subscription.on(event, (payload) => {\n            let enrichedPayload = {\n                schema: payload.schema,\n                table: payload.table,\n                commit_timestamp: payload.commit_timestamp,\n                eventType: payload.type,\n                new: {},\n                old: {},\n                errors: payload.errors,\n            };\n            enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n            callback(enrichedPayload);\n        });\n        return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n    subscribe(callback = () => { }) {\n        this.subscription.onError((e) => callback('SUBSCRIPTION_ERROR', e));\n        this.subscription.onClose(() => callback('CLOSED'));\n        this.subscription\n            .subscribe()\n            .receive('ok', () => callback('SUBSCRIBED'))\n            .receive('error', (e) => callback('SUBSCRIPTION_ERROR', e))\n            .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n        return this.subscription;\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,OAAO,MAAMC,sBAAN,CAA6B;EAChCC,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,EAAqC;IAC5C,MAAMC,UAAU,GAAG,EAAnB;IACA,MAAMC,KAAK,GAAGF,SAAS,KAAK,GAAd,GAAqB,YAAWD,MAAO,EAAvC,GAA4C,YAAWA,MAAO,IAAGC,SAAU,EAAzF;IACA,MAAMG,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBM,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB;;IACA,IAAID,SAAJ,EAAe;MACXF,UAAU,CAAC,YAAD,CAAV,GAA2BE,SAA3B;IACH;;IACD,KAAKE,YAAL,GAAoBR,MAAM,CAACS,OAAP,CAAeJ,KAAf,EAAsBD,UAAtB,CAApB;EACH;;EACDM,iBAAiB,CAACC,OAAD,EAAU;IACvB,MAAMC,OAAO,GAAG;MACZC,GAAG,EAAE,EADO;MAEZC,GAAG,EAAE;IAFO,CAAhB;;IAIA,IAAIH,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BJ,OAAO,CAACI,IAAR,KAAiB,QAAlD,EAA4D;MACxDH,OAAO,CAACC,GAAR,GAAchB,YAAY,CAACmB,iBAAb,CAA+BL,OAAO,CAACM,OAAvC,EAAgDN,OAAO,CAACO,MAAxD,CAAd;IACH;;IACD,IAAIP,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BJ,OAAO,CAACI,IAAR,KAAiB,QAAlD,EAA4D;MACxDH,OAAO,CAACE,GAAR,GAAcjB,YAAY,CAACmB,iBAAb,CAA+BL,OAAO,CAACM,OAAvC,EAAgDN,OAAO,CAACQ,UAAxD,CAAd;IACH;;IACD,OAAOP,OAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIQ,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAChB,KAAKd,YAAL,CAAkBY,EAAlB,CAAqBC,KAArB,EAA6BV,OAAD,IAAa;MACrC,IAAIY,eAAe,GAAG;QAClBrB,MAAM,EAAES,OAAO,CAACT,MADE;QAElBsB,KAAK,EAAEb,OAAO,CAACa,KAFG;QAGlBC,gBAAgB,EAAEd,OAAO,CAACc,gBAHR;QAIlBC,SAAS,EAAEf,OAAO,CAACI,IAJD;QAKlBF,GAAG,EAAE,EALa;QAMlBC,GAAG,EAAE,EANa;QAOlBa,MAAM,EAAEhB,OAAO,CAACgB;MAPE,CAAtB;MASAJ,eAAe,GAAGK,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,eAAlB,CAAd,EAAkD,KAAKb,iBAAL,CAAuBC,OAAvB,CAAlD,CAAlB;MACAW,QAAQ,CAACC,eAAD,CAAR;IACH,CAZD;IAaA,OAAO,IAAP;EACH;EACD;AACJ;AACA;;;EACIO,SAAS,CAACR,QAAQ,GAAG,MAAM,CAAG,CAArB,EAAuB;IAC5B,KAAKd,YAAL,CAAkBuB,OAAlB,CAA2BC,CAAD,IAAOV,QAAQ,CAAC,oBAAD,EAAuBU,CAAvB,CAAzC;IACA,KAAKxB,YAAL,CAAkByB,OAAlB,CAA0B,MAAMX,QAAQ,CAAC,QAAD,CAAxC;IACA,KAAKd,YAAL,CACKsB,SADL,GAEKI,OAFL,CAEa,IAFb,EAEmB,MAAMZ,QAAQ,CAAC,YAAD,CAFjC,EAGKY,OAHL,CAGa,OAHb,EAGuBF,CAAD,IAAOV,QAAQ,CAAC,oBAAD,EAAuBU,CAAvB,CAHrC,EAIKE,OAJL,CAIa,SAJb,EAIwB,MAAMZ,QAAQ,CAAC,wBAAD,CAJtC;IAKA,OAAO,KAAKd,YAAZ;EACH;;AAzD+B"},"metadata":{},"sourceType":"module"}