{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  constructor() {\n    super(...arguments);\n    /** @deprecated Use `contains()` instead. */\n\n    this.cs = this.contains;\n    /** @deprecated Use `containedBy()` instead. */\n\n    this.cd = this.containedBy;\n    /** @deprecated Use `rangeLt()` instead. */\n\n    this.sl = this.rangeLt;\n    /** @deprecated Use `rangeGt()` instead. */\n\n    this.sr = this.rangeGt;\n    /** @deprecated Use `rangeGte()` instead. */\n\n    this.nxl = this.rangeGte;\n    /** @deprecated Use `rangeLte()` instead. */\n\n    this.nxr = this.rangeLte;\n    /** @deprecated Use `rangeAdjacent()` instead. */\n\n    this.adj = this.rangeAdjacent;\n    /** @deprecated Use `overlaps()` instead. */\n\n    this.ov = this.overlaps;\n  }\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  not(column, operator, value) {\n    this.url.searchParams.append(`${column}`, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows satisfying at least one of the filters.\n   *\n   * @param filters  The filters to use, separated by commas.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n\n\n  or(filters, {\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`;\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` exactly matches the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  eq(column, value) {\n    this.url.searchParams.append(`${column}`, `eq.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` doesn't match the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  neq(column, value) {\n    this.url.searchParams.append(`${column}`, `neq.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is greater than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  gt(column, value) {\n    this.url.searchParams.append(`${column}`, `gt.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is greater than or\n   * equal to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  gte(column, value) {\n    this.url.searchParams.append(`${column}`, `gte.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is less than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  lt(column, value) {\n    this.url.searchParams.append(`${column}`, `lt.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is less than or equal\n   * to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  lte(column, value) {\n    this.url.searchParams.append(`${column}`, `lte.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case sensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n\n\n  like(column, pattern) {\n    this.url.searchParams.append(`${column}`, `like.${pattern}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case insensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(`${column}`, `ilike.${pattern}`);\n    return this;\n  }\n  /**\n   * A check for exact equality (null, true, false), finds all rows whose\n   * value on the stated `column` exactly match the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  is(column, value) {\n    this.url.searchParams.append(`${column}`, `is.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is found on the\n   * specified `values`.\n   *\n   * @param column  The column to filter on.\n   * @param values  The values to filter with.\n   */\n\n\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column`\n   * contains the values specified in `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(`${column}`, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column` is\n   * contained by the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to the\n   * left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(`${column}`, `sl.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to\n   * the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(`${column}`, `sr.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(`${column}`, `nxl.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(`${column}`, `nxr.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is adjacent to\n   * the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(`${column}`, `adj.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose array or range value on the stated `column` overlaps\n   * (has a value in common) with the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose text or tsvector value on the stated `column` matches\n   * the tsquery in `query`.\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   * @param type  The type of tsquery conversion to use on `query`.\n   */\n\n\n  textSearch(column, query, {\n    config,\n    type = null\n  } = {}) {\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` instead.\n   */\n\n\n  fts(column, query, {\n    config\n  } = {}) {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * plainto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n   */\n\n\n  plfts(column, query, {\n    config\n  } = {}) {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * phraseto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n   */\n\n\n  phfts(column, query, {\n    config\n  } = {}) {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * websearch_to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n   */\n\n\n  wfts(column, query, {\n    config\n  } = {}) {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose `column` satisfies the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(`${column}`, `${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose columns match the specified `query` object.\n   *\n   * @param query  The object to filter with, with column names as keys mapped\n   *               to their filter values.\n   */\n\n\n  match(query) {\n    Object.keys(query).forEach(key => {\n      this.url.searchParams.append(`${key}`, `eq.${query[key]}`);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"names":["PostgrestTransformBuilder","PostgrestFilterBuilder","constructor","arguments","cs","contains","cd","containedBy","sl","rangeLt","sr","rangeGt","nxl","rangeGte","nxr","rangeLte","adj","rangeAdjacent","ov","overlaps","not","column","operator","value","url","searchParams","append","or","filters","foreignTable","key","eq","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","Array","isArray","JSON","stringify","range","textSearch","query","config","type","typePart","configPart","undefined","fts","plfts","phfts","wfts","filter","match","Object","keys","forEach"],"sources":["C:/Users/Sergipetec/Documents/supabase-angular/node_modules/@supabase/postgrest-js/dist/module/lib/PostgrestFilterBuilder.js"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n    constructor() {\n        super(...arguments);\n        /** @deprecated Use `contains()` instead. */\n        this.cs = this.contains;\n        /** @deprecated Use `containedBy()` instead. */\n        this.cd = this.containedBy;\n        /** @deprecated Use `rangeLt()` instead. */\n        this.sl = this.rangeLt;\n        /** @deprecated Use `rangeGt()` instead. */\n        this.sr = this.rangeGt;\n        /** @deprecated Use `rangeGte()` instead. */\n        this.nxl = this.rangeGte;\n        /** @deprecated Use `rangeLte()` instead. */\n        this.nxr = this.rangeLte;\n        /** @deprecated Use `rangeAdjacent()` instead. */\n        this.adj = this.rangeAdjacent;\n        /** @deprecated Use `overlaps()` instead. */\n        this.ov = this.overlaps;\n    }\n    /**\n     * Finds all rows which doesn't satisfy the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(`${column}`, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows satisfying at least one of the filters.\n     *\n     * @param filters  The filters to use, separated by commas.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n    or(filters, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`;\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` exactly matches the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    eq(column, value) {\n        this.url.searchParams.append(`${column}`, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` doesn't match the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    neq(column, value) {\n        this.url.searchParams.append(`${column}`, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    gt(column, value) {\n        this.url.searchParams.append(`${column}`, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is greater than or\n     * equal to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    gte(column, value) {\n        this.url.searchParams.append(`${column}`, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than the\n     * specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    lt(column, value) {\n        this.url.searchParams.append(`${column}`, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is less than or equal\n     * to the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    lte(column, value) {\n        this.url.searchParams.append(`${column}`, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case sensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(`${column}`, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value in the stated `column` matches the supplied\n     * `pattern` (case insensitive).\n     *\n     * @param column  The column to filter on.\n     * @param pattern  The pattern to filter with.\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(`${column}`, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * A check for exact equality (null, true, false), finds all rows whose\n     * value on the stated `column` exactly match the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    is(column, value) {\n        this.url.searchParams.append(`${column}`, `is.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose value on the stated `column` is found on the\n     * specified `values`.\n     *\n     * @param column  The column to filter on.\n     * @param values  The values to filter with.\n     */\n    in(column, values) {\n        const cleanedValues = values\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column`\n     * contains the values specified in `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(`${column}`, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose json, array, or range value on the stated `column` is\n     * contained by the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(`${column}`, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to the\n     * left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(`${column}`, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is strictly to\n     * the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(`${column}`, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the left of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(`${column}`, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` does not extend\n     * to the right of the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(`${column}`, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose range value on the stated `column` is adjacent to\n     * the specified `range`.\n     *\n     * @param column  The column to filter on.\n     * @param range  The range to filter with.\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(`${column}`, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose array or range value on the stated `column` overlaps\n     * (has a value in common) with the specified `value`.\n     *\n     * @param column  The column to filter on.\n     * @param value  The value to filter with.\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(`${column}`, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Finds all rows whose text or tsvector value on the stated `column` matches\n     * the tsquery in `query`.\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     * @param type  The type of tsquery conversion to use on `query`.\n     */\n    textSearch(column, query, { config, type = null, } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` instead.\n     */\n    fts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * plainto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n     */\n    plfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * phraseto_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n     */\n    phfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose tsvector value on the stated `column` matches\n     * websearch_to_tsquery(`query`).\n     *\n     * @param column  The column to filter on.\n     * @param query  The Postgres tsquery string to filter with.\n     * @param config  The text search configuration to use.\n     *\n     * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n     */\n    wfts(column, query, { config } = {}) {\n        const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n        this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose `column` satisfies the filter.\n     *\n     * @param column  The column to filter on.\n     * @param operator  The operator to filter with.\n     * @param value  The value to filter with.\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(`${column}`, `${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Finds all rows whose columns match the specified `query` object.\n     *\n     * @param query  The object to filter with, with column names as keys mapped\n     *               to their filter values.\n     */\n    match(query) {\n        Object.keys(query).forEach((key) => {\n            this.url.searchParams.append(`${key}`, `eq.${query[key]}`);\n        });\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}